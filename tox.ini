[etox]
envlist = py312
isolated_build = True

[testenv]
description = Run tests for ops_core and agentkit with src layout
# Tox should automatically discover packages in src/ when run from the root
# No need for 'package = editable-legacy' or explicit PYTHONPATH setting usually

# Set environment variables for the test environment
setenv =
    DRAMATIQ_TESTING = 1

# Pass necessary environment variables if needed (e.g., for live tests later)
# passenv =
#     DATABASE_URL
    # Add other env vars like API keys if/when needed for specific test sets
    # Using `dotenv run --` in commands instead of passenv for reliability

# Install dependencies for both packages
deps =
    # Tool to load .env before commands
    python-dotenv>=1.0.0

    # Test tools
    pytest
    pytest-asyncio
    pytest-mock
    pytest-docker>=2.0.0 # Added for managing Docker containers in tests
    locust>=2.0.0

    # Install agentkit editable from local directory (absolute path)
    -e /home/sf2/Workspace/23-opspawn/1-t/agentkit[test,long_term_memory]

    # Install ops_core editable from local directory (absolute path)
    -e /home/sf2/Workspace/23-opspawn/1-t/ops-core

allowlist_externals =
    bash
    python

commands =
    # 1. Generate gRPC code (paths adjusted for local structure)
    python -m grpc_tools.protoc -I{toxinidir}/ops-core/src/ops_core/proto --python_out={toxinidir}/ops-core/src/ops_core/grpc_internal --grpc_python_out={toxinidir}/ops-core/src/ops_core/grpc_internal {toxinidir}/ops-core/src/ops_core/proto/tasks.proto

    # 2. Run the import fix script (paths adjusted for local structure)
    bash {toxinidir}/ops-core/scripts/fix_grpc_imports.sh {toxinidir}/ops-core/src/ops_core/grpc_internal

    # 3. Print DATABASE_URL for debugging
    python -c "import os; print(f'DATABASE_URL in tox env: {os.getenv(\"DATABASE_URL\")}')"

    # 4. Run pytest tests with high verbosity and extra summary (paths adjusted for local structure)
    #    Pass positional arguments (like file paths or -k) from tox command line
    #    Default to running tests in both ops-core and agentkit local directories, excluding 'live' tests
    dotenv run -- python -m pytest -vv -rA -m "not live" {posargs:{toxinidir}/ops-core/tests {toxinidir}/agentkit/tests}

[pytest]
# Add asyncio config here proactively to avoid the warning
asyncio_mode = strict
# Explicitly set fixture loop scope to match default test scope
asyncio_default_fixture_loop_scope = function
# asyncio_default_test_loop_scope = "function" # This is the default, no need to set explicitly
markers =
    live: mark test as live integration test requiring API keys

[testenv:migrate]
description = Run Alembic migrations
# Inherit dependencies and settings from [testenv]
# Explicitly set PYTHONPATH for this environment - This didn't work reliably
# setenv =
#     PYTHONPATH = {toxinidir}/src
# Override commands to only run alembic, adding local src dirs to sys.path manually
commands =
    # Use argv=['-c', config_path, 'downgrade', 'base'] or ['-c', config_path, 'upgrade', 'head']
    python -c "import sys; sys.path.insert(0, '{toxinidir}/ops_core/src'); sys.path.insert(0, '{toxinidir}/agentkit/src'); import alembic.config; alembic.config.main(argv=['-c', '{toxinidir}/ops_core/alembic.ini', 'upgrade', 'head'])"
