# Configuration file for MCP servers managed by ops-core.
# Defines how ops-core discovers, runs, and interacts with MCP servers.

# Base directory relative to which script_paths can be defined.
# If null or empty, script_path should be absolute.
# Example: /home/sf2/Cline/MCP
mcp_server_base_path: null

servers:
  # Example: A locally run Python server (like the google-flights example)
  # Replace 'google-flights-example' with the actual server key/name.
  # google-flights-example:
  #   enabled: true
  #   command: python # Command to execute the script
  #   # Path to the server script.
  #   # If mcp_server_base_path is set, this can be relative to it.
  #   # Otherwise, it should be an absolute path.
  #   script_path: /path/to/your/google/flights/server.py # <-- IMPORTANT: Replace with actual path
  #   env:
  #     # Environment variables passed to the server process.
  #     # Use ${VAR_NAME} syntax to substitute values from ops-core's environment.
  #     # This is crucial for securely passing API keys or other secrets.
  #     GOOGLE_FLIGHTS_API_KEY: ${GOOGLE_FLIGHTS_API_KEY_FROM_OPS_CORE_ENV} # <-- Replace ENV var name if needed

  # Example: An installed Node.js server package (like brave-search)
  # Replace 'brave-search-example' with the actual server key/name.
  # brave-search-example:
  #   enabled: true
  #   command: npx # Command to run the server package
  #   args: # Arguments for the command
  #     - -y
  #     - "@modelcontextprotocol/server-brave-search" # Replace with actual package if different
  #   # script_path: null # Not needed when using command/args for packages
  #   env:
  #     BRAVE_API_KEY: ${BRAVE_SEARCH_API_KEY_FROM_OPS_CORE_ENV} # <-- Replace ENV var name if needed

  # Add configurations for other MCP servers here...
  # Example structure for a disabled server:
  # some-other-server:
  #   enabled: false
  #   command: ...
  #   script_path: ...
  #   env: ...
