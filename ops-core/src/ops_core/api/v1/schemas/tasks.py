"""
Pydantic schemas for the Tasks API endpoints.
"""

from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, ConfigDict, field_validator # Import ConfigDict and field_validator
from datetime import datetime
import uuid # Import uuid

from ops_core.models.tasks import TaskStatus  # Corrected import path


# --- Request Schemas ---

class TaskCreateRequest(BaseModel):
    """
    Schema for creating a new task via the API. Specifies the type of task
    and the necessary input data.
    """
    task_type: str = Field(
        ...,
        description="Type identifier for the task (e.g., 'agent_run', 'data_processing').",
        examples=["agent_run"]
    )
    input_data: Dict[str, Any] = Field(
        default_factory=dict,
        description="Input data payload required for the task execution. Structure depends on task_type.",
        examples=[{"prompt": "Summarize the following text: ...", "agent_id": "summarizer_v1"}]
    )
    # Optional: Add a client-provided request ID for idempotency?
    # request_id: Optional[str] = Field(None, description="Optional client-provided ID for idempotency.")

    # Example validator (if needed later)
    # @field_validator('task_type')
    # def task_type_must_be_known(cls, v):
    #     if v not in KNOWN_TASK_TYPES: # Replace KNOWN_TASK_TYPES with actual list/enum
    #         raise ValueError(f"Unknown task_type: {v}")
    #     return v


# --- Response Schemas ---

class TaskResponse(BaseModel):
    """
    Schema representing a task's state and details in API responses.
    Provides comprehensive information about a submitted task.
    """
    id: uuid.UUID = Field(..., description="Unique identifier for the task.", examples=[uuid.uuid4()]) # Changed task_id to id and type to UUID
    task_type: str = Field(..., description="Type identifier for the task.", examples=["agent_run"])
    status: TaskStatus = Field(..., description="Current status of the task.", examples=[TaskStatus.PENDING])
    input_data: Dict[str, Any] = Field(..., description="The original input data provided for the task.")
    output_data: Optional[Dict[str, Any]] = Field(None, description="Output data generated by the task upon completion.", examples=[{"summary": "This is the summary."}])
    created_at: datetime = Field(..., description="Timestamp when the task was created (UTC).")
    updated_at: datetime = Field(..., description="Timestamp when the task was last updated (UTC).")
    started_at: Optional[datetime] = Field(None, description="Timestamp when the task execution started (UTC).")
    completed_at: Optional[datetime] = Field(None, description="Timestamp when the task execution completed (successfully or failed) (UTC).")
    error_message: Optional[str] = Field(None, description="Error message if the task failed.", examples=["Agent execution timed out."])

    # Use model_config = ConfigDict instead of class Config
    model_config = ConfigDict(from_attributes=True)


class TaskListResponse(BaseModel):
    """
    Schema for returning a list of tasks.
    """
    tasks: List[TaskResponse]
    total: int
