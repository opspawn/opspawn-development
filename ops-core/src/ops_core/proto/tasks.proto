syntax = "proto3";

package ops_core.proto;

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

// Represents the possible states of a task during its lifecycle.
// Mirrors the TaskStatus enum defined in ops_core.models.tasks.
enum TaskStatus {
  // Default unspecified status. Should not typically be used.
  TASK_STATUS_UNSPECIFIED = 0;
  // Task has been submitted but not yet started.
  PENDING = 1;
  // Task is currently being executed.
  RUNNING = 2;
  // Task finished execution successfully.
  COMPLETED = 3;
  // Task execution failed. Check error_message for details.
  FAILED = 4;
  // Task was cancelled before completion.
  CANCELLED = 5;
}

// Represents a single task managed by the Ops-Core system.
// Contains metadata, status, input/output data, and timestamps.
message Task {
  // Unique identifier for the task (e.g., UUID).
  string task_id = 1;
  // Type identifier for the task (e.g., "agent_run", "data_processing").
  string task_type = 2;
  // Current status of the task.
  TaskStatus status = 3;
  // Input data provided when the task was created. Structure depends on task_type.
  google.protobuf.Struct input_data = 4;
  // Result data generated by the task upon successful completion. Structure depends on task_type.
  google.protobuf.Struct result = 5; // Renamed from output_data
  // Timestamp when the task record was created (UTC).
  google.protobuf.Timestamp created_at = 6;
  // Timestamp when the task record was last updated (UTC).
  google.protobuf.Timestamp updated_at = 7;
  // Timestamp when the task execution started (UTC). Null if not started.
  google.protobuf.Timestamp started_at = 8;
  // Timestamp when the task execution completed (successfully or failed) (UTC). Null if not completed.
  google.protobuf.Timestamp completed_at = 9;
  // Error message if the task failed. Null otherwise.
  string error_message = 10;
}

// Request message for creating a new task via the TaskService.
message CreateTaskRequest {
  // Type identifier for the task to be created.
  string task_type = 1;
  // Input data required for the task execution.
  google.protobuf.Struct input_data = 2;
  // Optional: Add a client-provided request ID for idempotency?
  // string request_id = 3;
}

// Response message for the CreateTask RPC method.
// Returns the newly created task with its initial state.
message CreateTaskResponse {
  // The created task object.
  Task task = 1;
}

// Request message for retrieving a specific task by its ID.
message GetTaskRequest {
  // The unique identifier of the task to retrieve.
  string task_id = 1;
}

// Response message for the GetTask RPC method.
// Returns the details of the requested task.
message GetTaskResponse {
  // The retrieved task object.
  Task task = 1;
}

// Request message for listing tasks.
// Future versions may include filtering and pagination parameters.
message ListTasksRequest {
  // Example pagination/filtering fields (commented out for now):
  // TaskStatus filter_status = 1;
  // int32 page_size = 2;
  // string page_token = 3;
}

// Response message for the ListTasks RPC method.
// Returns a list of tasks and the total count.
message ListTasksResponse {
  // A list of task objects matching the request criteria.
  repeated Task tasks = 1;
  // Total number of tasks matching the request criteria (ignoring pagination for now).
  int32 total = 2;
  // Future pagination field:
  // string next_page_token = 3;
}

// Defines the gRPC service for managing tasks within the Ops-Core system.
// Provides methods for creating, retrieving, and listing tasks.
service TaskService {
  // Submits a new task to the Ops-Core scheduler for asynchronous execution.
  // Returns the initial state of the created task.
  rpc CreateTask(CreateTaskRequest) returns (CreateTaskResponse);

  // Retrieves the complete details and current status of a specific task using its unique ID.
  // Returns the task details or an error if not found.
  rpc GetTask(GetTaskRequest) returns (GetTaskResponse);

  // Retrieves a list of tasks managed by the Ops-Core system.
  // Future versions may support filtering and pagination.
  rpc ListTasks(ListTasksRequest) returns (ListTasksResponse);

  // Potential future methods:
  // rpc CancelTask(CancelTaskRequest) returns (CancelTaskResponse);
  // rpc UpdateTask(UpdateTaskRequest) returns (UpdateTaskResponse);
}
